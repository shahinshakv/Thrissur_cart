/* eslint-disable prefer-destructuring */
/* eslint-disable lines-between-class-members */
/* eslint-disable no-console */
// const debug = require('debug')('netsuite-cash-sale');
const NetSuiteSalesRecord = require('./netsuite-sales-record');
const NetSuiteCashSaleShipping = require('./netsuite-cash-sale-shipping');
const NetSuiteCashSaleBilling = require('./netsuite-cash-sale-billing');
const NetSuiteCashSaleProduct = require('./netsuite-cash-sale-product');
const NetSuiteCashSaleDiscount = require('./netsuite-cash-sale-discount');
const NetSuiteCashSaleTax = require('./netsuite-cash-sale-tax');

/**
 * NetSuiteCashSale class
 * @extends NetSuiteSalesRecord
 */
class NetSuiteCashSale extends NetSuiteSalesRecord {
  // Private fields

  /**
   * Create an instance of the NetSuiteCashSale class
   * @param {object} netsuiteInternalCashSaleRecord  CashSale json object returned from the NetSuite web service
   */
  constructor(netsuiteInternalCashSaleRecord) {
    super(netsuiteInternalCashSaleRecord);
    if (netsuiteInternalCashSaleRecord['@type'] !== 'tranSales:CashSale') {
      throw new Error('must construct with a NetSuite internal cash sale record');
    }
  }

  /**
   * Get the tax point date
   * @return {Date} The tax point date
   */
  get taxPointDate() {
    return new Date(this.internalRecord.taxPointDate);
  }

  /**
   * Get the nexus internal Id
   * @return {string} The nexus internal Id
   */
  get nexusInternalId() {
    return this.internalRecord.nexus['@internalId'];
  }

  /**
   * Get the nexus name
   * @return {string} The nexus name
   */
  get nexusName() {
    return this.internalRecord.nexus.name;
  }

  /**
   * Get the sales order internal Id
   * @return {string} The sales order internal Id
   */
  get salesOrderInternalId() {
    return this.internalRecord.createdFrom['@internalId'];
  }

  /**
   * Get the sales order external Id
   * @return {string} The sales order external Id
   */
  get salesOrderExternalId() {
    return this.internalRecord.otherRefNum;
  }

  /**
   * Get the sales order transaction Id
   * @return {string} The sales order transaction Id
   */
  get salesOrderTransactionId() {
    const netsuiteInternalRecord = this.internalRecord;
    const idx = netsuiteInternalRecord.createdFrom.name.indexOf('SO');
    return netsuiteInternalRecord.createdFrom.name.slice(idx);
  }

  /**
   * Get the shipping information
   * @return {NetSuiteCashSaleShipping} A shipping object
   */
  get shipping() {
    const salesShippingItem = this.salesShippingItem;
    return new NetSuiteCashSaleShipping({
      address: salesShippingItem.address,
      quantity: salesShippingItem.quantity,
      amount: salesShippingItem.amount,
      grossAmount: salesShippingItem.grossAmount,
      taxAmount: salesShippingItem.taxAmount,
      costEstimateType: salesShippingItem.costEstimateType,
      costEstimate: salesShippingItem.costEstimate,
      taxDetailsReference: salesShippingItem.taxDetailsReference,
    });
  }

  /**
   * Get the billing information
   * @return {NetSuiteCashSaleBilling} A billing object
   */
  get billing() {
    const salesBillingItem = this.salesBillingItem;
    const netsuiteInternalRecord = this.internalRecord;
    return new NetSuiteCashSaleBilling({
      address: salesBillingItem.address,
      paymentMethod: salesBillingItem.paymentMethod,
      creditCardNumber: salesBillingItem.creditCardNumber,
      creditCardExpirationDate: salesBillingItem.creditCardExpirationDate,
      creditCardProcessor: salesBillingItem.creditCardProcessor,
      creditCardApproved: salesBillingItem.creditCardApproved,
      paymentToken: salesBillingItem.paymentToken,
      transactionId: salesBillingItem.transactionId,
      paymentAccountNumber: salesBillingItem.paymentAccountNumber,
      paymentAlternateId: salesBillingItem.paymentAlternateId,
      paypalProcess: salesBillingItem.paypalProcess,
      isFraud: salesBillingItem.isFraud,
      productTotal: salesBillingItem.productTotal,
      discountTotal: salesBillingItem.discountTotal,
      taxTotal: salesBillingItem.taxTotal,
      shippingCost: salesBillingItem.shippingCost,
      subTotal: salesBillingItem.subTotal,
      total: salesBillingItem.total,
      status: salesBillingItem.status,
      giftCertificateApplied: salesBillingItem.giftCertificateApplied,
      email: netsuiteInternalRecord.email,
    });
  }

  /**
   * Get the products
   * @return {NetSuiteCashSaleProduct[]} An array of product objects
   */
  get products() {
    const products = [];
    const productItems = this.productItems;
    productItems.forEach(productItem => {
      const netsuiteCsProduct = new NetSuiteCashSaleProduct({
        internalId: productItem.item['@internalId'],
        name: productItem.item.name,
        description: productItem.description,
        quantity: productItem.quantity,
        costEstimateType: productItem.costEstimateType,
        costEstimate: productItem.costEstimate,
        rate: productItem.rate,
        amount: productItem.amount,
        grossAmount: productItem.grossAmt,
        taxAmount: productItem.taxAmount,
        taxDetailsReference: productItem.taxDetailsReference,
      });
      products.push(netsuiteCsProduct);
    });
    return products;
  }

  /**
   * Get the discounts
   * @return {NetSuiteCashSaleDiscount[]} An array of discount objects
   */
  get discounts() {
    const discounts = [];
    const discountItems = this.discountItems;
    discountItems.forEach(discountItem => {
      const netsuiteCsDiscount = new NetSuiteCashSaleDiscount({
        internalId: discountItem.item['@internalId'],
        name: discountItem.item.name,
        description: discountItem.description,
        amount: discountItem.amount,
        grossAmount: discountItem.grossAmt,
        taxDetailsReference: discountItem.taxDetailsReference,
        rate: discountItem.rate,
      });
      discounts.push(netsuiteCsDiscount);
    });
    return discounts;
  }

  /**
   * Get the taxes
   * @return {NetSuiteCashSaleTax[]} An array of tax objects
   */
  get taxes() {
    const taxes = [];
    const taxItems = this.taxItems;
    taxItems.forEach(taxItem => {
      const netsuiteCsTax = new NetSuiteCashSaleTax({
        taxDetailsReference: taxItem.taxDetailsReference,
        lineType: taxItem.lineType,
        lineName: taxItem.lineName,
        taxTypeInternalId: taxItem.taxType['@internalId'],
        taxTypeName: taxItem.taxType.name,
        taxCodeInternalId: taxItem.taxCode['@internalId'],
        taxCodeName: taxItem.taxCode.name,
        calcDetail: taxItem.calcDetail,
        netAmount: taxItem.netAmount,
        taxBasis: taxItem.taxBasis,
        taxRate: taxItem.taxRate,
        taxAmount: taxItem.taxAmount,
      });
      taxes.push(netsuiteCsTax);
    });
    return taxes;
  }

  /**
   * Compare against another NetSuiteCashSale object to see if they're equal
   * @param {NetSuiteCashSale} netsuiteCashSale  The object to compare against
   * @return {boolean} true if they're equal, else returns false
   */
  // Note: not using Date and ID values when comparing objects as they may change for each transaction
  equals(netsuiteCashSale) {
    if (
      super.equals(netsuiteCashSale) &&
      this.nexusInternalId === netsuiteCashSale.nexusInternalId &&
      this.nexusName === netsuiteCashSale.nexusName
    ) {
      return true;
    }
    return false;
  }

  /**
   * Output the properties to the console
   */
  dump() {
    console.log('*****************************');
    console.log('*** NETSUITE CASH SALE...');
    console.log('*****************************');
    console.log(`  taxPointDate: ${this.taxPointDate}`);
    console.log(`  nexusInternalId: ${this.nexusInternalId}`);
    console.log(`  nexusName: ${this.nexusName}`);
    console.log(`  salesOrderInternalId: ${this.salesOrderInternalId}`);
    console.log(`  salesOrderExternalId: ${this.salesOrderExternalId}`);
    console.log(`  salesOrderTransactionId: ${this.salesOrderTransactionId}`);
    super.dump();
  }
}

module.exports = NetSuiteCashSale;
