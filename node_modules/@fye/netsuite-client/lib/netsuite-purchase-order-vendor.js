/* eslint-disable lines-between-class-members */
/* eslint-disable no-console */
// const debug = require('debug')('netsuite-purchas-order-vendor');
const NetSuiteAddress = require('./netsuite-address');

/**
 * NetSuitePurchaseOrderVendor class
 */
class NetSuitePurchaseOrderVendor {
  /**
   * Create an instance of the NetSuitePurchaseOrderVendor class
   * @param  {object} props
   * @param  {object} props.billingAddress  Address json object
   * @param  {string} props.internalId      Internal Id
   * @param  {string} props.name            Name
   * @param  {string} props.orderId         Order Id
   */
  constructor({ billingAddress, internalId, name, orderId }) {
    this.billingAddress = new NetSuiteAddress(billingAddress);
    this.internalId = internalId;
    this.name = name;
    this.orderId = orderId !== undefined ? orderId : 'not available';
  }

  /**
   * Compare against another NetSuitePurchaseOrderVendor object to see if they're equal
   * @param {NetSuitePurchaseOrderVendor} netsuitePurchaseOrderVendor  The object to compare against
   * @return {boolean} true if they're equal, else returns false
   */
  // Note: not using OrderId value when comparing objects as it may change for each transaction
  equals(netsuitePurchaseOrderVendor) {
    if (
      this.billingAddress.equals(netsuitePurchaseOrderVendor.billingAddress) &&
      this.internalId === netsuitePurchaseOrderVendor.internalId &&
      this.name === netsuitePurchaseOrderVendor.name
    ) {
      return true;
    }
    return false;
  }

  /**
   * Output the properties to the console
   */
  dump() {
    console.log('  ***************************');
    console.log('  ** Vendor Details...');
    console.log('  ***************************');
    this.billingAddress.dump();
    console.log(`    internalId: ${this.internalId}`);
    console.log(`    name: ${this.name}`);
    console.log(`    orderId: ${this.orderId}`);
  }
}

module.exports = NetSuitePurchaseOrderVendor;
