/* eslint-disable prefer-destructuring */
/* eslint-disable no-console */
// const debug = require('debug')('netsuite-sales-order');
const NetSuiteSalesRecord = require('./netsuite-sales-record');
const NetSuiteSalesOrderShipping = require('./netsuite-sales-order-shipping');
const NetSuiteSalesOrderBilling = require('./netsuite-sales-order-billing');
const NetSuiteSalesOrderProduct = require('./netsuite-sales-order-product');
const NetSuiteSalesOrderDiscount = require('./netsuite-sales-order-discount');
const NetSuiteSalesOrderTax = require('./netsuite-sales-order-tax');

/**
 * Enum for NetSuite SalesOrder status values
 * @readonly
 * @enum {string}
 */
const netSuiteSalesOrderStatus = {
  BILLED: '_salesOrderBilled',
  CANCELLED: '_salesOrderCancelled',
  CLOSED: '_salesOrderClosed',
  PARTIALLY_FULFILLED: '_salesOrderPartiallyFulfilled',
  PENDING_APPROVAL: '_salesOrderPendingApproval',
  PENDING_BILLING: '_salesOrderPendingBilling',
  PENDING_BILLING_PARTIALLY_FULFILLED: '_salesOrderPendingBillingPartiallyFulfilled',
  PENDING_FULFILLMENT: '_salesOrderPendingFulfillment',
};

/**
 * NetSuiteSalesOrder class
 * @extends NetSuiteSalesRecord
 */
class NetSuiteSalesOrder extends NetSuiteSalesRecord {
  // Private fields

  /**
   * Create an instance of the NetSuiteSalesOrder class
   * @param {object} netsuiteInternalSalesOrderRecord  SalesOrder json object returned from the NetSuite web service
   */
  constructor(netsuiteInternalSalesOrderRecord) {
    super(netsuiteInternalSalesOrderRecord);
    if (netsuiteInternalSalesOrderRecord['@type'] !== 'tranSales:SalesOrder') {
      throw new Error('must construct with a NetSuite internal sales order record');
    }
  }

  /**
   * Get the external Id
   * @return {string} The external Id
   */
  get externalId() {
    const netsuiteInternalRecord = this.internalRecord;
    return netsuiteInternalRecord['@externalId'];
  }

  /**
   * Get the next bill date
   * @return {Date} The next bill date
   */
  get nextBillDate() {
    const netsuiteInternalRecord = this.internalRecord;
    if (netsuiteInternalRecord.nextBill !== undefined) {
      return new Date(netsuiteInternalRecord.nextBill);
    }
    return 'not available';
  }

  /**
   * Get the order status
   * @return {string} The order status
   */
  get orderStatus() {
    return this.internalRecord.status;
  }

  /**
   * Get the shipping information
   * @return {NetSuiteSalesOrderShipping} A shipping object
   */
  get shipping() {
    const salesShippingItem = this.salesShippingItem;
    const netsuiteInternalRecord = this.internalRecord;
    let quantityBilled = 0;
    const shippingItem = this.shippingItem;
    if (shippingItem) {
      quantityBilled = shippingItem.quantityBilled;
    }
    return new NetSuiteSalesOrderShipping({
      address: salesShippingItem.address,
      quantity: salesShippingItem.quantity,
      amount: salesShippingItem.amount,
      grossAmount: salesShippingItem.grossAmount,
      taxAmount: salesShippingItem.taxAmount,
      costEstimateType: salesShippingItem.costEstimateType,
      costEstimate: salesShippingItem.costEstimate,
      taxDetailsReference: salesShippingItem.taxDetailsReference,
      date: netsuiteInternalRecord.shipDate,
      method: netsuiteInternalRecord.shipMethod.name,
      trackingNumber: netsuiteInternalRecord.linkedTrackingNumbers,
      quantityBilled,
    });
  }

  /**
   * Get the billing information
   * @return {NetSuiteSalesOrderBilling} A billing object
   */
  get billing() {
    const salesBillingItem = this.salesBillingItem;
    const netsuiteInternalRecord = this.internalRecord;
    return new NetSuiteSalesOrderBilling({
      address: salesBillingItem.address,
      paymentMethod: salesBillingItem.paymentMethod,
      creditCardNumber: salesBillingItem.creditCardNumber,
      creditCardExpirationDate: salesBillingItem.creditCardExpirationDate,
      creditCardProcessor: salesBillingItem.creditCardProcessor,
      creditCardApproved: salesBillingItem.creditCardApproved,
      paymentToken: salesBillingItem.paymentToken,
      transactionId: salesBillingItem.transactionId,
      paymentAccountNumber: salesBillingItem.paymentAccountNumber,
      paymentAlternateId: salesBillingItem.paymentAlternateId,
      paypalProcess: salesBillingItem.paypalProcess,
      isFraud: salesBillingItem.isFraud,
      productTotal: salesBillingItem.productTotal,
      discountTotal: salesBillingItem.discountTotal,
      taxTotal: salesBillingItem.taxTotal,
      shippingCost: salesBillingItem.shippingCost,
      subTotal: salesBillingItem.subTotal,
      total: salesBillingItem.total,
      status: salesBillingItem.status,
      giftCertificateApplied: salesBillingItem.giftCertificateApplied,
      balance: netsuiteInternalRecord.balance,
      authorizationCode: netsuiteInternalRecord.authCode,
      paymentEventResult: netsuiteInternalRecord.paymentEventResult,
      paymentEventHoldReason: netsuiteInternalRecord.paymentEventHoldReason,
      paymentEventType: netsuiteInternalRecord.paymentEventType,
      paymentEventDate: netsuiteInternalRecord.paymentEventDate,
    });
  }

  /**
   * Get the products
   * @return {NetSuiteSalesOrderProduct[]} An array of product objects
   */
  get products() {
    const products = [];
    const productItems = this.productItems;
    productItems.forEach(productItem => {
      const purchaseOrderInternalId = productItem.createdPo ? productItem.createdPo['@internalId'] : undefined;
      const purchaseOrderTransactionId = productItem.createdPo ? productItem.createdPo.name : undefined;
      const netsuiteSoProduct = new NetSuiteSalesOrderProduct({
        internalId: productItem.item['@internalId'],
        name: productItem.item.name,
        description: productItem.description,
        quantity: productItem.quantity,
        costEstimateType: productItem.costEstimateType,
        costEstimate: productItem.costEstimate,
        rate: productItem.rate,
        amount: productItem.amount,
        grossAmount: productItem.grossAmt,
        taxAmount: productItem.taxAmount,
        taxDetailsReference: productItem.taxDetailsReference,
        commitInventory: productItem.commitInventory,
        purchaseOrderInternalId,
        purchaseOrderTransactionId,
        purchaseOrderType: productItem.createPo,
        vendorInternalId: productItem.poVendor['@internalId'],
        vendorName: productItem.poVendor.name,
        quantityBackOrdered: productItem.quantityBackOrdered,
        quantityBilled: productItem.quantityBilled,
        quantityCommitted: productItem.quantityCommitted,
        quantityFulfilled: productItem.quantityFulfilled,
      });
      products.push(netsuiteSoProduct);
    });
    return products;
  }

  /**
   * Get the discounts
   * @return {NetSuiteSalesOrderDiscount[]} An array of discount objects
   */
  get discounts() {
    const discounts = [];
    const discountItems = this.discountItems;
    discountItems.forEach(discountItem => {
      const netsuiteSoDiscount = new NetSuiteSalesOrderDiscount({
        internalId: discountItem.item['@internalId'],
        name: discountItem.item.name,
        description: discountItem.description,
        amount: discountItem.amount,
        grossAmount: discountItem.grossAmt,
        taxDetailsReference: discountItem.taxDetailsReference,
      });
      discounts.push(netsuiteSoDiscount);
    });
    return discounts;
  }

  /**
   * Get the taxes
   * @return {NetSuiteSalesOrderTax[]} An array of tax objects
   */
  get taxes() {
    const taxes = [];
    const taxItems = this.taxItems;
    taxItems.forEach(taxItem => {
      const netsuiteSoTax = new NetSuiteSalesOrderTax({
        taxDetailsReference: taxItem.taxDetailsReference,
        lineType: taxItem.lineType,
        lineName: taxItem.lineName,
        taxTypeInternalId: taxItem.taxType['@internalId'],
        taxTypeName: taxItem.taxType.name,
        taxCodeInternalId: taxItem.taxCode['@internalId'],
        taxCodeName: taxItem.taxCode.name,
        calcDetail: taxItem.calcDetail,
        netAmount: taxItem.netAmount,
        taxBasis: taxItem.taxBasis,
        taxRate: taxItem.taxRate,
        taxAmount: taxItem.taxAmount,
      });
      taxes.push(netsuiteSoTax);
    });
    return taxes;
  }

  /**
   * Compare against another NetSuiteSalesOrder object to see if they're equal
   * @param {NetSuiteSalesOrder} netsuiteSalesOrder  The object to compare against
   * @return {boolean} true if they're equal, else returns false
   */
  // Note: not using Date and ID values when comparing objects as they may change for each transaction
  equals(netsuiteSalesOrder) {
    if (super.equals(netsuiteSalesOrder) && this.orderStatus === netsuiteSalesOrder.orderStatus) {
      return true;
    }
    return false;
  }

  /**
   * Output the properties to the console
   */
  dump() {
    console.log('*****************************');
    console.log('*** NETSUITE SALES ORDER...');
    console.log('*****************************');
    console.log(`  orderStatus: ${this.orderStatus}`);
    console.log(`  externalId: ${this.externalId}`);
    console.log(`  nextBillDate: ${this.nextBillDate}`);
    super.dump();
  }
}

module.exports = {
  NetSuiteSalesOrder,
  netSuiteSalesOrderStatus,
};
