/* eslint-disable prefer-destructuring */
/* eslint-disable no-console */
// const debug = require('debug')('netsuite-purchas-order');
const NetSuiteRecord = require('./netsuite-record');
const NetSuitePurchaseOrderVendor = require('./netsuite-purchase-order-vendor');
const NetSuitePurchaseOrderShipping = require('./netsuite-purchase-order-shipping');
const NetSuitePurchaseOrderProduct = require('./netsuite-purchase-order-product');
const NetSuitePurchaseOrderExpense = require('./netsuite-purchase-order-expense');

/**
 * Enum for NetSuite PurchaseOrder status values
 * @readonly
 * @enum {string}
 */
const netSuitePurchaseOrderStatus = {
  CLOSED: '_purchaseOrderClosed',
  FULLY_BILLED: '_purchaseOrderFullyBilled',
  PARTIALLY_RECEIVED: '_purchaseOrderPartiallyReceived',
  PENDING_BILL: '_purchaseOrderPendingBill',
  PENDING_BILLING_PARTIALLY_RECEIVED: '_purchaseOrderPendingBillingPartiallyReceived',
  PENDING_RECEIPT: '_purchaseOrderPendingReceipt',
  PENDING_SUPERVISOR_APPROVAL: '_purchaseOrderPendingSupervisorApproval',
  REJECTED_BY_SUPERVISOR: '_purchaseOrderRejectedBySupervisor',
};

/**
 * NetSuitePurchaseOrder class
 * @extends NetSuiteRecord
 */
class NetSuitePurchaseOrder extends NetSuiteRecord {
  // Private fields

  /**
   * Create an instance of the NetSuitePurchaseOrder class
   * @param {object} netsuiteInternalPurchaseOrderRecord  PurchaseOrder json object returned from NetSuite web service
   */
  constructor(netsuiteInternalPurchaseOrderRecord) {
    super(netsuiteInternalPurchaseOrderRecord);
    if (netsuiteInternalPurchaseOrderRecord['@type'] !== 'tranPurch:PurchaseOrder') {
      throw new Error('must construct with a NetSuite internal purchase order record');
    }
  }

  /**
   * @private  This method is for internal use only
   */
  expenseItemsExist() {
    const netsuiteInternalRecord = this.internalRecord;
    const exist =
      netsuiteInternalRecord.expenseList !== undefined && netsuiteInternalRecord.expenseList.expense !== undefined;
    return exist;
  }

  /**
   * @private  This property is for internal use only
   */
  get expenseItems() {
    if (this.expenseItemsExist()) {
      const netsuiteInternalRecord = this.internalRecord;
      if (netsuiteInternalRecord.expenseList.expense.length !== undefined) {
        return netsuiteInternalRecord.expenseList.expense;
      }
      return [netsuiteInternalRecord.expenseList.expense];
    }
    return [];
  }

  /**
   * @private  This method is for internal use only
   */
  static productCustomFieldsExist(netsuiteInternalPurchaseOrderProductRecord) {
    const exist =
      netsuiteInternalPurchaseOrderProductRecord.customFieldList !== undefined &&
      netsuiteInternalPurchaseOrderProductRecord.customFieldList.customField !== undefined;
    return exist;
  }

  /**
   * @private  This method is for internal use only
   */
  static getProductCustomFields(netsuiteInternalPurchaseOrderProductRecord) {
    if (NetSuitePurchaseOrder.productCustomFieldsExist(netsuiteInternalPurchaseOrderProductRecord)) {
      if (netsuiteInternalPurchaseOrderProductRecord.customFieldList.customField.length !== undefined) {
        return netsuiteInternalPurchaseOrderProductRecord.customFieldList.customField;
      }
      return [netsuiteInternalPurchaseOrderProductRecord.customFieldList.customField];
    }
    return [];
  }

  /**
   * @private  This method is for internal use only
   */
  static getProductCustomFieldValue({ netsuiteInternalPurchaseOrderProductRecord, key }) {
    let value;
    NetSuitePurchaseOrder.getProductCustomFields(netsuiteInternalPurchaseOrderProductRecord).forEach(customField => {
      if (customField['@scriptId'] === key) {
        value = customField.value;
      }
    });
    return value;
  }

  /**
   * Get the tax point date
   * @return {Date} The tax point date
   */
  get taxPointDate() {
    return new Date(this.internalRecord.taxPointDate);
  }

  /**
   * Get the sales order internal Id
   * @return {string} The sales order internal Id
   */
  get salesOrderInternalId() {
    return this.internalRecord.createdFrom['@internalId'];
  }

  /**
   * Get the sales order transaction Id
   * @return {string} The sales order transaction Id
   */
  get salesOrderTransactionId() {
    const netsuiteInternalRecord = this.internalRecord;
    const idx = netsuiteInternalRecord.createdFrom.name.indexOf('SO');
    return netsuiteInternalRecord.createdFrom.name.slice(idx);
  }

  /**
   * Get the currency name
   * @return {string} The currency name
   */
  get currencyName() {
    return this.internalRecord.currency.name;
  }

  /**
   * Get the department name
   * @return {string} The department name
   */
  get department() {
    return this.internalRecord.department.name;
  }

  /**
   * Get the needs sync value
   * @return {boolean} The needs sync value
   */
  get needsSync() {
    return this.getCustomFieldValue('custbody_needsync');
  }

  /**
   * Get the customer internal Id
   * @return {string} The customer internal Id
   */
  get customerInternalId() {
    const productItems = this.productItems;
    return productItems[0].customer['@internalId'];
  }

  /**
   * Get the customer Id
   * @return {string} The customer Id
   */
  get customerId() {
    const productItems = this.productItems;
    return productItems[0].customer.name;
  }

  /**
   * Get the customer name
   * @return {string} The customer name
   */
  get customerName() {
    const productItems = this.productItems;
    const space = ' ';
    const idx = productItems[0].customer.name.indexOf(space);
    return productItems[0].customer.name.slice(idx + space.length);
  }

  /**
   * Get the status
   * @return {string} The status
   */
  get status() {
    return this.internalRecord.status;
  }

  /**
   * Get the vendor information
   * @return {NetSuitePurchaseOrderVendor} A vendor object
   */
  get vendor() {
    const orderId = this.getCustomFieldValue('custbody_dropshipper_order_id');
    const netsuiteInternalRecord = this.internalRecord;
    return new NetSuitePurchaseOrderVendor({
      billingAddress: netsuiteInternalRecord.billingAddress,
      internalId: netsuiteInternalRecord.entity['@internalId'],
      name: netsuiteInternalRecord.entity.name,
      orderId,
    });
  }

  /**
   * Get the shipping information
   * @return {NetSuitePurchaseOrderShipping} A shipping object
   */
  get shipping() {
    const netsuiteInternalRecord = this.internalRecord;
    return new NetSuitePurchaseOrderShipping({
      address: netsuiteInternalRecord.shippingAddress,
      date: netsuiteInternalRecord.shipDate,
      method: netsuiteInternalRecord.shipMethod.name,
      trackingNumber: netsuiteInternalRecord.linkedTrackingNumbers,
    });
  }

  /**
   * Get the products
   * @return {NetSuitePurchaseOrderProduct[]} An array of product objects
   */
  get products() {
    const products = [];
    const productItems = this.productItems;
    productItems.forEach(productItem => {
      const quantityBackordered = NetSuitePurchaseOrder.getProductCustomFieldValue({
        netsuiteInternalPurchaseOrderProductRecord: productItem,
        key: 'custcol_quantity_backordered',
      });
      const quantityCancelled = NetSuitePurchaseOrder.getProductCustomFieldValue({
        netsuiteInternalPurchaseOrderProductRecord: productItem,
        key: 'custcol_quantity_cancelled',
      });
      const quantityOrdered = NetSuitePurchaseOrder.getProductCustomFieldValue({
        netsuiteInternalPurchaseOrderProductRecord: productItem,
        key: 'custcol_quantity_ordered',
      });
      const availableDate = NetSuitePurchaseOrder.getProductCustomFieldValue({
        netsuiteInternalPurchaseOrderProductRecord: productItem,
        key: 'custcol_avail_date',
      });
      const cancellationEmailsSent = NetSuitePurchaseOrder.getProductCustomFieldValue({
        netsuiteInternalPurchaseOrderProductRecord: productItem,
        key: 'custcolcancellation_emails_sent',
      });
      const cancelledInventoryReleased = NetSuitePurchaseOrder.getProductCustomFieldValue({
        netsuiteInternalPurchaseOrderProductRecord: productItem,
        key: 'custcol_cancelled_inventory_released',
      });
      const netsuitePoProduct = new NetSuitePurchaseOrderProduct({
        internalId: productItem.item['@internalId'],
        name: productItem.item.name,
        description: productItem.description,
        quantity: productItem.quantity,
        quantityReceived: productItem.quantityReceived,
        quantityBilled: productItem.quantityBilled,
        quantityBackordered,
        quantityCancelled,
        quantityOrdered,
        rate: productItem.rate,
        amount: productItem.amount,
        grossAmount: productItem.grossAmt,
        expectedReceiptDate: productItem.expectedReceiptDate,
        availableDate,
        cancellationEmailsSent,
        cancelledInventoryReleased,
        isClosed: productItem.isClosed,
        taxDetailsReference: productItem.taxDetailsReference,
      });
      products.push(netsuitePoProduct);
    });
    return products;
  }

  /**
   * Get the expenses
   * @return {NetSuitePurchaseOrderExpense[]} An array of expense objects
   */
  get expenses() {
    const expenses = [];
    const expenseItems = this.expenseItems;
    expenseItems.forEach(expenseItem => {
      const netsuitePoExpense = new NetSuitePurchaseOrderExpense({
        internalId: expenseItem.account['@internalId'],
        name: expenseItem.account.name,
        amount: expenseItem.amount,
        grossAmount: expenseItem.grossAmt,
        memo: expenseItem.memo,
        locationInternalId: expenseItem.location['@internalId'],
        locationName: expenseItem.location.name,
        isClosed: expenseItem.isClosed,
        isBillable: expenseItem.isBillable,
        taxDetailsReference: expenseItem.taxDetailsReference,
      });
      expenses.push(netsuitePoExpense);
    });
    return expenses;
  }

  /**
   * Compare against another NetSuitePurchaseOrder object to see if they're equal
   * @param {NetSuitePurchaseOrder} netsuitePurchaseOrder  The object to compare against
   * @return {boolean} true if they're equal, else returns false
   */
  // Note: not using Date, ID and Customer values when comparing objects
  //       as they may change for each transaction
  equals(netsuitePurchaseOrder) {
    if (
      this.currencyName !== netsuitePurchaseOrder.currencyName ||
      this.department !== netsuitePurchaseOrder.department ||
      this.needsSync !== netsuitePurchaseOrder.needsSync ||
      this.status !== netsuitePurchaseOrder.status ||
      !this.vendor.equals(netsuitePurchaseOrder.vendor) ||
      !this.shipping.equals(netsuitePurchaseOrder.shipping)
    ) {
      return false;
    }

    let productsEqual = true;
    const products1 = this.products;
    const products2 = netsuitePurchaseOrder.products;
    if (products1.length !== products2.length) return false;
    products1.forEach((product1, idx) => {
      if (!product1.equals(products2[idx])) productsEqual = false;
    });
    if (!productsEqual) return false;

    let expensesEqual = true;
    const expenses1 = this.expenses;
    const expenses2 = netsuitePurchaseOrder.expenses;
    if (expenses1.length !== expenses2.length) return false;
    expenses1.forEach((expense1, idx) => {
      if (!expense1.equals(expenses2[idx])) expensesEqual = false;
    });
    if (!expensesEqual) return false;

    return true;
  }

  /**
   * Output the properties to the console
   */
  dump() {
    console.log('*****************************');
    console.log('*** NETSUITE PURCHASE ORDER...');
    console.log('*****************************');
    super.dump();
    console.log(`  taxPointDate: ${this.taxPointDate}`);
    console.log(`  salesOrderInternalId: ${this.salesOrderInternalId}`);
    console.log(`  salesOrderTransactionId: ${this.salesOrderTransactionId}`);
    console.log(`  currencyName: ${this.currencyName}`);
    console.log(`  department: ${this.department}`);
    console.log(`  needsSync: ${this.needsSync}`);
    console.log(`  customerInternalId: ${this.customerInternalId}`);
    console.log(`  customerId: ${this.customerId}`);
    console.log(`  customerName: ${this.customerName}`);
    console.log(`  status: ${this.status}`);
    this.vendor.dump();
    this.shipping.dump();
    this.products.forEach(product => {
      product.dump();
    });
    this.expenses.forEach(expense => {
      expense.dump();
    });
  }
}

module.exports = {
  NetSuitePurchaseOrder,
  netSuitePurchaseOrderStatus,
};
