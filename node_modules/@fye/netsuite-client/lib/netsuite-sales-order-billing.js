/* eslint-disable lines-between-class-members */
/* eslint-disable no-console */
// const debug = require('debug')('netsuite-sales-order-billing');
const NetSuiteSalesBilling = require('./netsuite-sales-billing');

/**
 * NetSuiteSalesOrderBilling class
 * @extends NetSuiteSalesBilling
 */
class NetSuiteSalesOrderBilling extends NetSuiteSalesBilling {
  /**
   * Create an instance of the NetSuiteSalesOrderBilling class
   * @param  {object} props
   * @param  {object} props.address                   Address json object
   * @param  {string} props.paymentMethod             Payment method
   * @param  {string} props.creditCardNumber          Credit card number
   * @param  {string} props.creditCardExpirationDate  Credit card expiration date
   * @param  {string} props.creditCardProcessor       Credit card processor
   * @param  {boolean} props.creditCardApproved       Credit card approved
   * @param  {string} props.paymentToken              Payment token
   * @param  {string} props.transactionId             Transaction Id
   * @param  {string} props.paymentAccountNumber      Payment account number
   * @param  {string} props.paymentAlternateId        Payment alternate Id (eg. Credit)
   * @param  {boolean} props.paypalProcess            Paypal process
   * @param  {boolean} props.isFraud                  Is fraud
   * @param  {number} props.productTotal              Product total
   * @param  {number} props.discountTotal             Discount total
   * @param  {number} props.taxTotal                  Tax total
   * @param  {number} props.shippingCost              Shipping cost
   * @param  {number} props.subTotal                  Sub total
   * @param  {number} props.total                     Total
   * @param  {string} props.status                    Status
   * @param  {number} props.giftCertificateApplied    Gift certificate applied
   * @param  {number} props.balance                   Balance
   * @param  {string} props.authorizationCode         Authorization code
   * @param  {string} props.paymentEventResult        Payment event result
   * @param  {string} props.paymentEventHoldReason    Payment event hold reason
   * @param  {string} props.paymentEventType          Payment event type
   * @param  {string} props.paymentEventDate          Payment event date
   */
  constructor({
    address,
    paymentMethod,
    creditCardNumber,
    creditCardExpirationDate,
    creditCardProcessor,
    creditCardApproved,
    paymentToken,
    transactionId,
    paymentAccountNumber,
    paymentAlternateId,
    paypalProcess,
    isFraud,
    productTotal,
    discountTotal,
    taxTotal,
    shippingCost,
    subTotal,
    total,
    status,
    giftCertificateApplied,
    balance,
    authorizationCode,
    paymentEventResult,
    paymentEventHoldReason,
    paymentEventType,
    paymentEventDate,
  }) {
    super({
      address,
      paymentMethod,
      creditCardNumber,
      creditCardExpirationDate,
      creditCardProcessor,
      creditCardApproved,
      paymentToken,
      transactionId,
      paymentAccountNumber,
      paymentAlternateId,
      paypalProcess,
      isFraud,
      productTotal,
      discountTotal,
      taxTotal,
      shippingCost,
      subTotal,
      total,
      status,
      giftCertificateApplied,
    });
    this.balance = balance !== undefined ? balance : 'not available';
    this.authorizationCode = authorizationCode;
    this.paymentEventResult = paymentEventResult;
    this.paymentEventHoldReason = paymentEventHoldReason;
    this.paymentEventType = paymentEventType;
    this.paymentEventDate = new Date(paymentEventDate);
  }

  /**
   * Compare against another NetSuiteSalesOrderBilling object to see if they're equal
   * @param {NetSuiteSalesOrderBilling} netsuiteSalesOrderBilling  The object to compare against
   * @return {boolean} true if they're equal, else returns false
   */
  // Note: not using Date values when comparing objects as they may change for each transaction
  //       not using Balance because it's not always returned by NetSuite (Webservice get -vs- search api calls)
  equals(netsuiteSalesOrderBilling) {
    if (
      super.equals(netsuiteSalesOrderBilling) &&
      this.authorizationCode === netsuiteSalesOrderBilling.authorizationCode &&
      this.paymentEventResult === netsuiteSalesOrderBilling.paymentEventResult &&
      this.paymentEventHoldReason === netsuiteSalesOrderBilling.paymentEventHoldReason &&
      this.paymentEventType === netsuiteSalesOrderBilling.paymentEventType
    ) {
      return true;
    }
    return false;
  }

  /**
   * Output the properties to the console
   */
  dump() {
    super.dump();
    console.log(`    balance: ${this.balance}`);
    console.log(`    authorizationCode: ${this.authorizationCode}`);
    console.log(`    paymentEventResult: ${this.paymentEventResult}`);
    console.log(`    paymentEventHoldReason: ${this.paymentEventHoldReason}`);
    console.log(`    paymentEventType: ${this.paymentEventType}`);
    console.log(`    paymentEventDate: ${this.paymentEventDate}`);
  }
}

module.exports = NetSuiteSalesOrderBilling;
