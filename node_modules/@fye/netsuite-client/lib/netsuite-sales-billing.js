/* eslint-disable lines-between-class-members */
/* eslint-disable no-console */
// const debug = require('debug')('netsuite-sales-billing');
const NetSuiteAddress = require('./netsuite-address');

/**
 * NetSuiteSalesBilling class
 */
class NetSuiteSalesBilling {
  /**
   * @private  This constructor is for internal use only
   */
  constructor({
    address,
    paymentMethod,
    creditCardNumber,
    creditCardExpirationDate,
    creditCardProcessor,
    creditCardApproved,
    paymentToken,
    transactionId,
    paymentAccountNumber,
    paymentAlternateId,
    paypalProcess,
    isFraud,
    productTotal,
    discountTotal,
    taxTotal,
    shippingCost,
    subTotal,
    total,
    status,
    giftCertificateApplied,
  }) {
    this.address = new NetSuiteAddress(address);
    this.paymentMethod = paymentMethod;
    this.creditCardNumber = creditCardNumber;
    this.creditCardExpirationDate = new Date(creditCardExpirationDate);
    this.creditCardProcessor = creditCardProcessor;
    this.creditCardApproved = creditCardApproved;
    this.paymentToken = paymentToken;
    this.transactionId = transactionId;
    this.paymentAccountNumber = paymentAccountNumber;
    this.paymentAlternateId = paymentAlternateId !== undefined ? paymentAlternateId : 'not available';
    this.paypalProcess = paypalProcess !== undefined ? paypalProcess : 'not available';
    this.isFraud = isFraud;
    this.productTotal = productTotal;
    this.discountTotal = discountTotal;
    this.taxTotal = taxTotal;
    this.shippingCost = shippingCost;
    this.subTotal = subTotal;
    this.total = total;
    this.status = status;
    this.giftCertificateApplied = giftCertificateApplied !== undefined ? giftCertificateApplied : 'not available';
  }

  /**
   * @private  This method is for internal use only
   */
  // Note: not using ID and Token values when comparing objects as they may change for each transaction.
  //       not using PaypalProcess and giftCertificateApplied because they're not always
  //       returned by NetSuite (Webservice get -vs- search api calls).
  equals(netsuiteSalesBilling) {
    if (
      this.address.equals(netsuiteSalesBilling.address) &&
      this.paymentMethod === netsuiteSalesBilling.paymentMethod &&
      this.creditCardNumber === netsuiteSalesBilling.creditCardNumber &&
      this.creditCardExpirationDate.getTime() === netsuiteSalesBilling.creditCardExpirationDate.getTime() &&
      this.creditCardProcessor === netsuiteSalesBilling.creditCardProcessor &&
      this.creditCardApproved === netsuiteSalesBilling.creditCardApproved &&
      this.paymentAccountNumber === netsuiteSalesBilling.paymentAccountNumber &&
      this.paymentAlternateId === netsuiteSalesBilling.paymentAlternateId &&
      this.isFraud === netsuiteSalesBilling.isFraud &&
      this.productTotal === netsuiteSalesBilling.productTotal &&
      this.discountTotal === netsuiteSalesBilling.discountTotal &&
      this.taxTotal === netsuiteSalesBilling.taxTotal &&
      this.shippingCost === netsuiteSalesBilling.shippingCost &&
      this.subTotal === netsuiteSalesBilling.subTotal &&
      this.total === netsuiteSalesBilling.total &&
      this.status === netsuiteSalesBilling.status
    ) {
      return true;
    }
    return false;
  }

  /**
   * @private  This method is for internal use only
   */
  dump() {
    console.log('  ***************************');
    console.log('  ** Billing Details...');
    console.log('  ***************************');
    this.address.dump();
    console.log(`    paymentMethod: ${this.paymentMethod}`);
    console.log(`    creditCardNumber: ${this.creditCardNumber}`);
    console.log(`    creditCardExpirationDate: ${this.creditCardExpirationDate}`);
    console.log(`    creditCardProcessor: ${this.creditCardProcessor}`);
    console.log(`    creditCardApproved: ${this.creditCardApproved}`);
    console.log(`    paymentToken: ${this.paymentToken}`);
    console.log(`    transactionId: ${this.transactionId}`);
    console.log(`    paymentAccountNumber: ${this.paymentAccountNumber}`);
    console.log(`    paymentAlternateId: ${this.paymentAlternateId}`);
    console.log(`    paypalProcess: ${this.paypalProcess}`);
    console.log(`    isFraud: ${this.isFraud}`);
    console.log(`    productTotal: ${this.productTotal}`);
    console.log(`    discountTotal: ${this.discountTotal}`);
    console.log(`    taxTotal: ${this.taxTotal}`);
    console.log(`    shippingCost: ${this.shippingCost}`);
    console.log(`    subTotal: ${this.subTotal}`);
    console.log(`    total: ${this.total}`);
    console.log(`    status: ${this.status}`);
    console.log(`    giftCertificateApplied: ${this.giftCertificateApplied}`);
  }
}

module.exports = NetSuiteSalesBilling;
