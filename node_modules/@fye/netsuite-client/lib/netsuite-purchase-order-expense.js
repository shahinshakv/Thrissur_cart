/* eslint-disable lines-between-class-members */
/* eslint-disable no-console */
// const debug = require('debug')('netsuite-purchas-order-expense');

/**
 * NetSuitePurchaseOrderExpense class
 */
class NetSuitePurchaseOrderExpense {
  /**
   * Create an instance of the NetSuitePurchaseOrderExpense class
   * @param  {object} props
   * @param  {string} props.internalId           Internal Id
   * @param  {string} props.name                 Name
   * @param  {number} props.amount               Amount
   * @param  {number} props.grossAmount          Gross amount
   * @param  {string} props.memo                 Memo
   * @param  {string} props.locationInternalId   Location internal Id
   * @param  {string} props.locationName         Location name
   * @param  {boolean} props.isClosed            Is closed
   * @param  {boolean} props.isBillable          Is billable
   * @param  {string} props.taxDetailsReference  Tax details reference
   */
  constructor({
    internalId,
    name,
    amount,
    grossAmount,
    memo,
    locationInternalId,
    locationName,
    isClosed,
    isBillable,
    taxDetailsReference,
  }) {
    this.internalId = internalId;
    this.name = name;
    this.amount = amount;
    this.grossAmount = grossAmount;
    this.memo = memo;
    this.locationInternalId = locationInternalId;
    this.locationName = locationName;
    this.isClosed = isClosed;
    this.isBillable = isBillable;
    this.taxDetailsReference = taxDetailsReference;
  }

  /**
   * Compare against another NetSuitePurchaseOrderExpense object to see if they're equal
   * @param {NetSuitePurchaseOrderExpense} netsuitePurchaseOrderExpense  The object to compare against
   * @return {boolean} true if they're equal, else returns false
   */
  equals(netsuitePurchaseOrderExpense) {
    if (
      this.internalId === netsuitePurchaseOrderExpense.internalId &&
      this.name === netsuitePurchaseOrderExpense.name &&
      this.amount === netsuitePurchaseOrderExpense.amount &&
      this.grossAmount === netsuitePurchaseOrderExpense.grossAmount &&
      this.memo === netsuitePurchaseOrderExpense.memo &&
      this.locationInternalId === netsuitePurchaseOrderExpense.locationInternalId &&
      this.locationName === netsuitePurchaseOrderExpense.locationName &&
      this.isClosed === netsuitePurchaseOrderExpense.isClosed &&
      this.isBillable === netsuitePurchaseOrderExpense.isBillable &&
      this.taxDetailsReference === netsuitePurchaseOrderExpense.taxDetailsReference
    ) {
      return true;
    }
    return false;
  }

  /**
   * Output the properties to the console
   */
  dump() {
    console.log('  ***************************');
    console.log('  ** Expense Details...');
    console.log('  ***************************');
    console.log(`    internalId: ${this.internalId}`);
    console.log(`    name: ${this.name}`);
    console.log(`    amount: ${this.amount}`);
    console.log(`    grossAmount: ${this.grossAmount}`);
    console.log(`    memo: ${this.memo}`);
    console.log(`    locationInternalId: ${this.locationInternalId}`);
    console.log(`    locationName: ${this.locationName}`);
    console.log(`    isClosed: ${this.isClosed}`);
    console.log(`    isBillable: ${this.isBillable}`);
    console.log(`    taxDetailsReference: ${this.taxDetailsReference}`);
  }
}

module.exports = NetSuitePurchaseOrderExpense;
