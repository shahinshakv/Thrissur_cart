/* eslint-disable lines-between-class-members */
/* eslint-disable no-console */
// const debug = require('debug')('netsuite-purchas-order-product');
const NetSuiteProduct = require('./netsuite-product');

/**
 * NetSuitePurchaseOrderProduct class
 * @extends NetSuiteProduct
 */
class NetSuitePurchaseOrderProduct extends NetSuiteProduct {
  /**
   * Create an instance of the NetSuitePurchaseOrderProduct class
   * @param  {object} props
   * @param  {string} props.internalId                  Internal Id
   * @param  {string} props.name                        Name
   * @param  {string} props.description                 Description
   * @param  {number} props.quantity                    Quantity
   * @param  {number} props.quantityReceived            Quantity received
   * @param  {number} props.quantityBilled              Quantity billed
   * @param  {number} props.quantityBackordered         Quantity backordered
   * @param  {number} props.quantityCancelled           Quantity cancelled
   * @param  {number} props.quantityOrdered             Quantity ordered
   * @param  {number} props.rate                        Rate
   * @param  {number} props.amount                      Amount
   * @param  {number} props.grossAmount                 Gross amount
   * @param  {Date} props.expectedReceiptDate           Expected receipt date
   * @param  {Date} props.availableDate                 Available date
   * @param  {number} props.cancellationEmailsSent      Cancellation emails sent
   * @param  {number} props.cancelledInventoryReleased  Cancelled inventory released
   * @param  {boolean} props.isClosed                   Is closed value
   * @param  {string} props.taxDetailsReference         Tax details reference
   */
  constructor({
    internalId,
    name,
    description,
    quantity,
    quantityReceived,
    quantityBilled,
    quantityBackordered,
    quantityCancelled,
    quantityOrdered,
    rate,
    amount,
    grossAmount,
    expectedReceiptDate,
    availableDate,
    cancellationEmailsSent,
    cancelledInventoryReleased,
    isClosed,
    taxDetailsReference,
  }) {
    super({
      internalId,
      name,
      description,
      quantity,
    });
    this.quantityReceived = quantityReceived;
    this.quantityBilled = quantityBilled;
    this.quantityBackordered = quantityBackordered;
    this.quantityCancelled = quantityCancelled;
    this.quantityOrdered = quantityOrdered !== undefined ? quantityOrdered : 'not available';
    this.rate = rate;
    this.amount = amount;
    this.grossAmount = grossAmount;
    this.expectedReceiptDate = new Date(expectedReceiptDate);
    this.availableDate = availableDate !== undefined ? new Date(availableDate) : 'not available';
    this.cancellationEmailsSent = cancellationEmailsSent;
    this.cancelledInventoryReleased = cancelledInventoryReleased;
    this.isClosed = isClosed;
    this.taxDetailsReference = taxDetailsReference;
  }

  /**
   * Compare against another NetSuitePurchaseOrderProduct object to see if they're equal
   * @param {NetSuitePurchaseOrderProduct} netsuitePurchaseOrderProduct  The object to compare against
   * @return {boolean} true if they're equal, else returns false
   */
  // Note: not using Date values when comparing objects as they may change for each transaction
  equals(netsuitePurchaseOrderProduct) {
    if (
      super.equals(netsuitePurchaseOrderProduct) &&
      this.quantityReceived === netsuitePurchaseOrderProduct.quantityReceived &&
      this.quantityBilled === netsuitePurchaseOrderProduct.quantityBilled &&
      this.quantityBackordered === netsuitePurchaseOrderProduct.quantityBackordered &&
      this.quantityCancelled === netsuitePurchaseOrderProduct.quantityCancelled &&
      this.quantityOrdered === netsuitePurchaseOrderProduct.quantityOrdered &&
      this.rate === netsuitePurchaseOrderProduct.rate &&
      this.amount === netsuitePurchaseOrderProduct.amount &&
      this.grossAmount === netsuitePurchaseOrderProduct.grossAmount &&
      this.cancellationEmailsSent === netsuitePurchaseOrderProduct.cancellationEmailsSent &&
      this.cancelledInventoryReleased === netsuitePurchaseOrderProduct.cancelledInventoryReleased &&
      this.isClosed === netsuitePurchaseOrderProduct.isClosed &&
      this.taxDetailsReference === netsuitePurchaseOrderProduct.taxDetailsReference
    ) {
      return true;
    }
    return false;
  }

  /**
   * Output the properties to the console
   */
  dump() {
    super.dump();
    console.log(`    quantityReceived: ${this.quantityReceived}`);
    console.log(`    quantityBilled: ${this.quantityBilled}`);
    console.log(`    quantityBackordered: ${this.quantityBackordered}`);
    console.log(`    quantityCancelled: ${this.quantityCancelled}`);
    console.log(`    quantityOrdered: ${this.quantityOrdered}`);
    console.log(`    rate: ${this.rate}`);
    console.log(`    amount: ${this.amount}`);
    console.log(`    grossAmount: ${this.grossAmount}`);
    console.log(`    expectedReceiptDate: ${this.expectedReceiptDate}`);
    console.log(`    availableDate: ${this.availableDate}`);
    console.log(`    cancellationEmailsSent: ${this.cancellationEmailsSent}`);
    console.log(`    cancelledInventoryReleased: ${this.cancelledInventoryReleased}`);
    console.log(`    isClosed: ${this.isClosed}`);
    console.log(`    taxDetailsReference: ${this.taxDetailsReference}`);
  }
}

module.exports = NetSuitePurchaseOrderProduct;
