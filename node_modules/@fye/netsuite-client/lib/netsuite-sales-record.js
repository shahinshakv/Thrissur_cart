/* eslint-disable prefer-destructuring */
/* eslint-disable no-console */
// const debug = require('debug')('netsuite-sales-record');
const NetSuiteRecord = require('./netsuite-record');

/**
 * NetSuiteSalesRecord class
 * @extends NetSuiteRecord
 */
class NetSuiteSalesRecord extends NetSuiteRecord {
  // Private fields

  /**
   * Get the sales effective date
   * @return {Date} The sales effective date
   */
  get salesEffectiveDate() {
    return new Date(this.internalRecord.salesEffectiveDate);
  }

  /**
   * Get the last reauth date
   * @return {Date} The last reauth date
   */
  get lastReauthDate() {
    const lastReauthDate = this.getCustomFieldValue('custbodylastreauthdate');
    if (lastReauthDate === undefined) {
      return 'not available';
    }
    return new Date(lastReauthDate);
  }

  /**
   * Get the total cost estimate
   * @return {number} The total cost estimate
   */
  get totalCostEstimate() {
    return this.internalRecord.totalCostEstimate;
  }

  /**
   * Get the estimated gross profit
   * @return {number} The estimated gross profit
   */
  get estGrossProfit() {
    return this.internalRecord.estGrossProfit;
  }

  /**
   * Get the estimated gross profit percent
   * @return {number} The estimated gross profit precent
   */
  get estGrossProfitPercent() {
    return this.internalRecord.estGrossProfitPercent;
  }

  /**
   * Get the exchange rate
   * @return {number} The exchange rate
   */
  get exchangeRate() {
    return this.internalRecord.exchangeRate;
  }

  /**
   * Get the currency name
   * @return {string} The currency name
   */
  get currencyName() {
    return this.internalRecord.currencyName;
  }

  /**
   * Get the department name
   * @return {string} The department name
   */
  get department() {
    return this.internalRecord.department.name;
  }

  /**
   * Get the is special order value
   * @return {boolean} The is special order value
   */
  get isSpecialOrder() {
    return this.getCustomFieldValue('custbody_is_special_order');
  }

  /**
   * Get the needs sync value
   * @return {boolean} The needs sync value
   */
  get needsSync() {
    return this.getCustomFieldValue('custbody_needsync');
  }

  /**
   * Get the customer's internal Id
   * @return {string} The customer's internal Id
   */
  get customerInternalId() {
    return this.internalRecord.entity['@internalId'];
  }

  /**
   * Get the customer's Id
   * @return {string} The customer's Id
   */
  get customerId() {
    return this.internalRecord.entity.name;
  }

  /**
   * Get the customer's name
   * @return {string} The customer's name
   */
  get customerName() {
    const netsuiteInternalRecord = this.internalRecord;
    const space = ' ';
    const idx = netsuiteInternalRecord.entity.name.indexOf(space);
    return netsuiteInternalRecord.entity.name.slice(idx + space.length);
  }

  /**
   * Get the order tracking URL
   * @return {string} The order tracking URL
   */
  get orderTrackingUrl() {
    return this.getCustomFieldValue('custbody_sfcc_tracking_url');
  }

  /**
   * @private  This property is for internal use only
   */
  get discountItems() {
    const discountItems = [];
    this.items.forEach(item => {
      if (item.item.name !== 'Shipping' && item.quantity === undefined) {
        discountItems.push(item);
      }
    });
    return discountItems;
  }

  /**
   * @private  This method is for internal use only
   */
  taxItemsExist() {
    const netsuiteInternalRecord = this.internalRecord;
    const exist =
      netsuiteInternalRecord.taxDetailsList !== undefined &&
      netsuiteInternalRecord.taxDetailsList.taxDetails !== undefined;
    return exist;
  }

  /**
   * @private  This property is for internal use only
   */
  get taxItems() {
    if (this.taxItemsExist()) {
      const netsuiteInternalRecord = this.internalRecord;
      if (netsuiteInternalRecord.taxDetailsList.taxDetails.length !== undefined) {
        return netsuiteInternalRecord.taxDetailsList.taxDetails;
      }
      return [netsuiteInternalRecord.taxDetailsList.taxDetails];
    }
    return [];
  }

  /**
   * @private  This property is for internal use only
   */
  get salesShippingItem() {
    let quantity = 0;
    let amount = 0;
    let grossAmount = 0;
    let taxAmount = 0;
    let costEstimateType = '';
    let costEstimate = 0;
    let taxDetailsReference = '';
    const shippingItem = this.shippingItem;
    if (shippingItem) {
      quantity = shippingItem.quantity;
      amount = shippingItem.amount;
      grossAmount = shippingItem.grossAmt;
      taxAmount = shippingItem.taxAmount;
      costEstimateType = shippingItem.costEstimateType;
      costEstimate = shippingItem.costEstimate;
      taxDetailsReference = shippingItem.taxDetailsReference;
    }
    const netsuiteInternalRecord = this.internalRecord;
    return {
      address: netsuiteInternalRecord.shippingAddress,
      quantity,
      amount,
      grossAmount,
      taxAmount,
      costEstimateType,
      costEstimate,
      taxDetailsReference,
    };
  }

  /**
   * @private  This property is for internal use only
   */
  get salesBillingItem() {
    let shippingCost = 0;
    const shippingItem = this.shippingItem;
    if (shippingItem) {
      shippingCost = shippingItem.amount;
    }
    let productTotal = 0;
    const productItems = this.productItems;
    productItems.forEach(productItem => {
      productTotal += parseFloat(productItem.amount);
    });
    productTotal = productTotal.toFixed(2); // only need 2 decimal places
    let discountTotal = 0;
    const discountItems = this.discountItems;
    discountItems.forEach(discountItem => {
      discountTotal += parseFloat(discountItem.amount);
    });
    discountTotal = discountTotal.toFixed(2); // only need 2 decimal places
    const paymentToken = this.getCustomFieldValue('custbody_pay_token');
    const paymentAccountNumber = this.getCustomFieldValue('custbody_pay_account_number');
    const paymentAlternateId = this.getCustomFieldValue('custbody_pay_alt_id');
    const isFraud = this.getCustomFieldValue('custbody_fye_isfraud');
    const netsuiteInternalRecord = this.internalRecord;
    const creditCardProcessor = netsuiteInternalRecord.creditCardProcessor
      ? netsuiteInternalRecord.creditCardProcessor.name
      : undefined;
    return {
      address: netsuiteInternalRecord.billingAddress,
      paymentMethod: netsuiteInternalRecord.paymentMethod.name,
      creditCardNumber: netsuiteInternalRecord.ccNumber,
      creditCardExpirationDate: netsuiteInternalRecord.ccExpireDate,
      creditCardProcessor,
      creditCardApproved: netsuiteInternalRecord.ccApproved,
      paymentToken,
      transactionId: netsuiteInternalRecord.pnRefNum,
      paymentAccountNumber,
      paymentAlternateId,
      paypalProcess: netsuiteInternalRecord.paypalProcess,
      isFraud,
      productTotal,
      discountTotal,
      taxTotal: netsuiteInternalRecord.taxTotal,
      shippingCost,
      subTotal: netsuiteInternalRecord.subTotal,
      total: netsuiteInternalRecord.total,
      status: netsuiteInternalRecord.status,
      giftCertificateApplied: netsuiteInternalRecord.giftCertApplied,
    };
  }

  /**
   * @private  This method is for internal use only
   */
  // Note: not using Date, Customer and OrderTracingkUrl values when comparing objects
  //       as they may change for each transaction
  equals(netsuiteSalesRecord) {
    if (
      this.totalCostEstimate !== netsuiteSalesRecord.totalCostEstimate ||
      this.estGrossProfit !== netsuiteSalesRecord.estGrossProfit ||
      this.estGrossProfitPercent !== netsuiteSalesRecord.estGrossProfitPercent ||
      this.exchangeRate !== netsuiteSalesRecord.exchangeRate ||
      this.currencyName !== netsuiteSalesRecord.currencyName ||
      this.department !== netsuiteSalesRecord.department ||
      this.isSpecialOrder !== netsuiteSalesRecord.isSpecialOrder ||
      this.needsSync !== netsuiteSalesRecord.needsSync ||
      !this.shipping.equals(netsuiteSalesRecord.shipping) ||
      !this.billing.equals(netsuiteSalesRecord.billing)
    ) {
      return false;
    }

    let productsEqual = true;
    const products1 = this.products;
    const products2 = netsuiteSalesRecord.products;
    if (products1.length !== products2.length) return false;
    products1.forEach((product1, idx) => {
      if (!product1.equals(products2[idx])) productsEqual = false;
    });
    if (!productsEqual) return false;

    let discountsEqual = true;
    const discounts1 = this.discounts;
    const discounts2 = netsuiteSalesRecord.discounts;
    if (discounts1.length !== discounts2.length) return false;
    discounts1.forEach((discount1, idx) => {
      if (!discount1.equals(discounts2[idx])) discountsEqual = false;
    });
    if (!discountsEqual) return false;

    let taxesEqual = true;
    const taxes1 = this.taxes;
    const taxes2 = netsuiteSalesRecord.taxes;
    if (taxes1.length !== taxes2.length) return false;
    taxes1.forEach((tax1, idx) => {
      if (!tax1.equals(taxes2[idx])) taxesEqual = false;
    });
    if (!taxesEqual) return false;

    return true;
  }

  /**
   * @private  This method is for internal use only
   */
  dump() {
    super.dump();
    console.log(`  salesEffectiveDate: ${this.salesEffectiveDate}`);
    console.log(`  lastReauthDate: ${this.lastReauthDate}`);
    console.log(`  totalCostEstimate: ${this.totalCostEstimate}`);
    console.log(`  estGrossProfit: ${this.estGrossProfit}`);
    console.log(`  estGrossProfitPercent: ${this.estGrossProfitPercent}`);
    console.log(`  exchangeRate: ${this.exchangeRate}`);
    console.log(`  currencyName: ${this.currencyName}`);
    console.log(`  department: ${this.department}`);
    console.log(`  isSpecialOrder: ${this.isSpecialOrder}`);
    console.log(`  needsSync: ${this.needsSync}`);
    console.log(`  customerInternalId: ${this.customerInternalId}`);
    console.log(`  customerId: ${this.customerId}`);
    console.log(`  customerName: ${this.customerName}`);
    console.log(`  orderTrackingUrl: ${this.orderTrackingUrl}`);
    if (this.shipping) {
      this.shipping.dump();
    }
    if (this.billing) {
      this.billing.dump();
    }
    this.products.forEach(product => {
      if (product) {
        product.dump();
      }
    });
    this.discounts.forEach(discount => {
      if (discount) {
        discount.dump();
      }
    });
    this.taxes.forEach(tax => {
      if (tax) {
        tax.dump();
      }
    });
  }
}

module.exports = NetSuiteSalesRecord;
