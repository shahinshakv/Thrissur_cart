/* eslint-disable lines-between-class-members */
/* eslint-disable no-console */
// const debug = require('debug')('netsuite-sales-order-product');
const NetSuiteSalesProduct = require('./netsuite-sales-product');

/**
 * NetSuiteSalesOrderProduct class
 * @extends NetSuiteSalesProduct
 */
class NetSuiteSalesOrderProduct extends NetSuiteSalesProduct {
  /**
   * Create an instance of the NetSuiteSalesOrderProduct class
   * @param  {object} props
   * @param  {string} props.internalId                  Internal Id
   * @param  {string} props.name                        Name
   * @param  {string} props.description                 Description
   * @param  {number} props.quantity                    Quantity
   * @param  {string} props.costEstimateType            Cost estimate type
   * @param  {number} props.costEstimate                Cost estimate
   * @param  {number} props.rate                        Rate
   * @param  {number} props.amount                      Amount
   * @param  {number} props.grossAmount                 Gross amount
   * @param  {number} props.taxAmount                   Tax amount
   * @param  {string} props.taxDetailsReference         Tax details reference
   * @param  {string} props.commitInventory             Commit inventory
   * @param  {string} props.purchaseOrderInternalId     Purchase order internal Id
   * @param  {string} props.purchaseOrderTransactionId  Purchase order transaction Id
   * @param  {string} props.purchaseOrderType           Purchase order type
   * @param  {string} props.vendorInternalId            Vendor internal Id
   * @param  {string} props.vendorName                  Vendor name
   * @param  {number} props.quantityBackOrdered         Quantity backordered
   * @param  {number} props.quantityBilled              Quantity billed
   * @param  {number} props.quantityCommitted           Quantity committed
   * @param  {number} props.quantityFulfilled           Quantity fulfilled
   */
  constructor({
    internalId,
    name,
    description,
    quantity,
    costEstimateType,
    costEstimate,
    rate,
    amount,
    grossAmount,
    taxAmount,
    taxDetailsReference,
    commitInventory,
    purchaseOrderInternalId,
    purchaseOrderTransactionId,
    purchaseOrderType,
    vendorInternalId,
    vendorName,
    quantityBackOrdered,
    quantityBilled,
    quantityCommitted,
    quantityFulfilled,
  }) {
    super({
      internalId,
      name,
      description,
      quantity,
      costEstimateType,
      costEstimate,
      rate,
      amount,
      grossAmount,
      taxAmount,
      taxDetailsReference,
    });
    this.commitInventory = commitInventory;
    this.purchaseOrderInternalId = purchaseOrderInternalId;
    this.purchaseOrderTransactionId = purchaseOrderTransactionId;
    this.purchaseOrderType = purchaseOrderType;
    this.vendorInternalId = vendorInternalId;
    this.vendorName = vendorName;
    this.quantityBackOrdered = quantityBackOrdered !== undefined ? quantityBackOrdered : 'not available';
    this.quantityBilled = quantityBilled;
    this.quantityCommitted = quantityCommitted;
    this.quantityFulfilled = quantityFulfilled;
  }

  /**
   * Compare against another NetSuiteSalesOrderProduct object to see if they're equal
   * @param {NetSuiteSalesOrderProduct} netsuiteSalesOrderProduct  The object to compare against
   * @return {boolean} true if they're equal, else returns false
   */
  // Note: not using IDs when comparing objects as they may change for each transaction
  equals(netsuiteSalesOrderProduct) {
    if (
      super.equals(netsuiteSalesOrderProduct) &&
      this.commitInventory === netsuiteSalesOrderProduct.commitInventory &&
      this.purchaseOrderType === netsuiteSalesOrderProduct.purchaseOrderType &&
      this.vendorInternalId === netsuiteSalesOrderProduct.vendorInternalId &&
      this.vendorName === netsuiteSalesOrderProduct.vendorName &&
      this.quantityBackOrdered === netsuiteSalesOrderProduct.quantityBackOrdered &&
      this.quantityBilled === netsuiteSalesOrderProduct.quantityBilled &&
      this.quantityCommitted === netsuiteSalesOrderProduct.quantityCommitted &&
      this.quantityFulfilled === netsuiteSalesOrderProduct.quantityFulfilled
    ) {
      return true;
    }
    return false;
  }

  /**
   * Output the properties to the console
   */
  dump() {
    super.dump();
    console.log(`    commitInventory: ${this.commitInventory}`);
    console.log(`    purchaseOrderInternalId: ${this.purchaseOrderInternalId}`);
    console.log(`    purchaseOrderTransactionId: ${this.purchaseOrderTransactionId}`);
    console.log(`    purchaseOrderType: ${this.purchaseOrderType}`);
    console.log(`    vendorInternalId: ${this.vendorInternalId}`);
    console.log(`    vendorName: ${this.vendorName}`);
    console.log(`    quantityBackOrdered: ${this.quantityBackOrdered}`);
    console.log(`    quantityBilled: ${this.quantityBilled}`);
    console.log(`    quantityCommitted: ${this.quantityCommitted}`);
    console.log(`    quantityFulfilled: ${this.quantityFulfilled}`);
  }
}

module.exports = NetSuiteSalesOrderProduct;
