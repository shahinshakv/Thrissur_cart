/* eslint-disable prefer-destructuring */
/* eslint-disable no-console */
// const debug = require('debug')('netsuite-item-fulfillment');
const NetSuiteRecord = require('./netsuite-record');
const NetSuiteItemFulfillmentShipping = require('./netsuite-item-fulfillment-shipping');
const NetSuiteItemFulfillmentProduct = require('./netsuite-item-fulfillment-product');
const NetSuiteItemFulfillmentPackage = require('./netsuite-item-fulfillment-package');

/**
 * NetSuiteItemFulfillment class
 * @extends NetSuiteRecord
 */
class NetSuiteItemFulfillment extends NetSuiteRecord {
  // Private fields

  /**
   * Create an instance of the NetSuiteItemFulfillment class
   * @param {object} netsuiteInternalItemFulfillmentRecord  ItemFulfillment json obj returned from NetSuite web service
   */
  constructor(netsuiteInternalItemFulfillmentRecord) {
    super(netsuiteInternalItemFulfillmentRecord);
    if (netsuiteInternalItemFulfillmentRecord['@type'] !== 'tranSales:ItemFulfillment') {
      throw new Error('must construct with a NetSuite internal item fulfillment record');
    }
  }

  /**
   * @private  This method is for internal use only
   */
  packageItemsExist() {
    const netsuiteInternalRecord = this.internalRecord;
    const exist =
      netsuiteInternalRecord.packageList !== undefined && netsuiteInternalRecord.packageList.package !== undefined;
    return exist;
  }

  /**
   * @private  This property is for internal use only
   */
  get packageItems() {
    if (this.packageItemsExist()) {
      const netsuiteInternalRecord = this.internalRecord;
      if (netsuiteInternalRecord.packageList.package.length !== undefined) {
        return netsuiteInternalRecord.packageList.package;
      }
      return [netsuiteInternalRecord.packageList.package];
    }
    return [];
  }

  /**
   * Get the sales order internal Id
   * @return {string} The sales order internal Id
   */
  get salesOrderInternalId() {
    return this.internalRecord.createdFrom['@internalId'];
  }

  /**
   * Get the sales order transaction Id
   * @return {string} The sales order transaction Id
   */
  get salesOrderTransactionId() {
    const netsuiteInternalRecord = this.internalRecord;
    const idx = netsuiteInternalRecord.createdFrom.name.indexOf('SO');
    return netsuiteInternalRecord.createdFrom.name.slice(idx);
  }

  /**
   * Get the customer internal Id
   * @return {string} The customer internal Id
   */
  get customerInternalId() {
    return this.internalRecord.entity['@internalId'];
  }

  /**
   * Get the customer Id
   * @return {string} The customer Id
   */
  get customerId() {
    return this.internalRecord.entity.name;
  }

  /**
   * Get the customer name
   * @return {string} The customer name
   */
  get customerName() {
    const netsuiteInternalRecord = this.internalRecord;
    const space = ' ';
    const idx = netsuiteInternalRecord.entity.name.indexOf(space);
    return netsuiteInternalRecord.entity.name.slice(idx + space.length);
  }

  /**
   * Get the shipping information
   * @return {NetSuiteItemFulfillmentShipping} A shipping object
   */
  get shipping() {
    const netsuiteInternalRecord = this.internalRecord;
    return new NetSuiteItemFulfillmentShipping({
      address: netsuiteInternalRecord.shippingAddress,
      method: netsuiteInternalRecord.shipMethod.name,
      status: netsuiteInternalRecord.shipStatus,
    });
  }

  /**
   * Get the products
   * @return {NetSuiteItemFulfillmentProduct[]} An array of product objects
   */
  get products() {
    const products = [];
    const productItems = this.productItems;
    productItems.forEach(productItem => {
      const chars = ': ';
      const idx = productItem.location.name.indexOf(chars);
      const vendorName = productItem.location.name.slice(idx + chars.length);
      const netsuiteIfProduct = new NetSuiteItemFulfillmentProduct({
        internalId: productItem.item['@internalId'],
        name: productItem.item.name,
        description: productItem.description,
        quantity: productItem.quantity,
        onHand: productItem.onHand,
        purchaseOrderTransactionId: productItem.createPo,
        vendorName,
      });
      products.push(netsuiteIfProduct);
    });
    return products;
  }

  /**
   * Get the packages
   * @return {NetSuiteItemFulfillmentPackage[]} An array of package objects
   */
  get packages() {
    const packages = [];
    const packageItems = this.packageItems;
    packageItems.forEach(packageItem => {
      const netsuiteIfPackage = new NetSuiteItemFulfillmentPackage({
        weight: packageItem.packageWeight,
        description: packageItem.packageDescr,
        trackingNumber: packageItem.packageTrackingNumber,
      });
      packages.push(netsuiteIfPackage);
    });
    return packages;
  }

  /**
   * Compare against another NetSuiteItemFulfillment object to see if they're equal
   * @param {NetSuiteItemFulfillment} netsuiteItemFulfillment  The object to compare against
   * @return {boolean} true if they're equal, else returns false
   */
  // Note: not using Date, ID and Customer values when comparing objects
  //       as they may change for each transaction
  equals(netsuiteItemFulfillment) {
    if (!this.shipping.equals(netsuiteItemFulfillment.shipping)) return false;

    let productsEqual = true;
    const products1 = this.products;
    const products2 = netsuiteItemFulfillment.products;
    if (products1.length !== products2.length) return false;
    products1.forEach((product1, idx) => {
      if (!product1.equals(products2[idx])) productsEqual = false;
    });
    if (!productsEqual) return false;

    let packagesEqual = true;
    const packages1 = this.packages;
    const packages2 = netsuiteItemFulfillment.packages;
    if (packages1.length !== packages2.length) return false;
    packages1.forEach((package1, idx) => {
      if (!package1.equals(packages2[idx])) packagesEqual = false;
    });
    if (!packagesEqual) return false;

    return true;
  }

  /**
   * Output the properties to the console
   */
  dump() {
    console.log('*****************************');
    console.log('*** NETSUITE ITEM FULFILLMENT...');
    console.log('*****************************');
    super.dump();
    console.log(`  salesOrderInternalId: ${this.salesOrderInternalId}`);
    console.log(`  salesOrderTransactionId: ${this.salesOrderTransactionId}`);
    console.log(`  customerInternalId: ${this.customerInternalId}`);
    console.log(`  customerId: ${this.customerId}`);
    console.log(`  customerName: ${this.customerName}`);
    this.shipping.dump();
    this.products.forEach(product => {
      product.dump();
    });
    this.packages.forEach(pkg => {
      pkg.dump();
    });
  }
}

module.exports = NetSuiteItemFulfillment;
