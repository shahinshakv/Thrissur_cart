/* eslint-disable no-console */
// const debug = require('debug')('netsuite-record');

/**
 * NetSuiteRecord class
 */
class NetSuiteRecord {
  /**
   * @private  This constructor is for internal use only
   */
  constructor(netsuiteInternalRecord) {
    this.netsuiteInternalRecord = netsuiteInternalRecord;
  }

  /**
   * @private  This property is for internal use only
   */
  get internalRecord() {
    return this.netsuiteInternalRecord;
  }

  /**
   * Get the internal Id
   * @return {string} The internal Id
   */
  get internalId() {
    const netsuiteInternalRecord = this.internalRecord;
    return netsuiteInternalRecord['@internalId'];
  }

  /**
   * Get the transaction Id
   * @return {string} The transaction Id
   */
  get transactionId() {
    return this.internalRecord.tranId;
  }

  /**
   * Get the transaction date
   * @return {Date} The transaction date
   */
  get transactionDate() {
    return new Date(this.internalRecord.tranDate);
  }

  /**
   * Get the created date
   * @return {Date} The created date
   */
  get createdDate() {
    return new Date(this.internalRecord.createdDate);
  }

  /**
   * Get the last modified date
   * @return {Date} The last modified date
   */
  get lastModifiedDate() {
    return new Date(this.internalRecord.lastModifiedDate);
  }

  /**
   * Get the memo
   * @return {string} The memo
   */
  get memo() {
    return this.internalRecord.memo !== undefined ? this.internalRecord.memo : 'not available';
  }

  /**
   * @private  This method is for internal use only
   */
  customFieldsExist() {
    const netsuiteInternalRecord = this.internalRecord;
    const exist =
      netsuiteInternalRecord.customFieldList !== undefined &&
      netsuiteInternalRecord.customFieldList.customField !== undefined;
    return exist;
  }

  /**
   * @private  This property is for internal use only
   */
  get customFields() {
    if (this.customFieldsExist()) {
      const netsuiteInternalRecord = this.internalRecord;
      if (netsuiteInternalRecord.customFieldList.customField.length !== undefined) {
        return netsuiteInternalRecord.customFieldList.customField;
      }
      return [netsuiteInternalRecord.customFieldList.customField];
    }
    return [];
  }

  /**
   * @private  This method is for internal use only
   */
  getCustomFieldValue(key) {
    let value;
    this.customFields.forEach(customField => {
      if (customField['@scriptId'] === key) {
        value = customField.value;
      }
    });
    return value;
  }

  /**
   * @private  This method is for internal use only
   */
  itemsExist() {
    const netsuiteInternalRecord = this.internalRecord;
    const exist = netsuiteInternalRecord.itemList !== undefined && netsuiteInternalRecord.itemList.item !== undefined;
    return exist;
  }

  /**
   * @private  This property is for internal use only
   */
  get items() {
    if (this.itemsExist()) {
      const netsuiteInternalRecord = this.internalRecord;
      if (netsuiteInternalRecord.itemList.item.length !== undefined) {
        return netsuiteInternalRecord.itemList.item;
      }
      return [netsuiteInternalRecord.itemList.item];
    }
    return [];
  }

  /**
   * @private  This property is for internal use only
   */
  get shippingItem() {
    let shippingItem;
    this.items.forEach(item => {
      if (item.item.name === 'Shipping') {
        shippingItem = item;
      }
    });
    return shippingItem;
  }

  /**
   * @private  This property is for internal use only
   */
  get productItems() {
    const productItems = [];
    this.items.forEach(item => {
      if (item.item.name !== 'Shipping' && item.quantity !== undefined) {
        productItems.push(item);
      }
    });
    return productItems;
  }

  /*
  // Nothing to check for yet...
  equals(netsuiteRecord) {
    return true;
  }
  */

  /**
   * @private  This method is for internal use only
   */
  dump() {
    console.log(`  internalId: ${this.internalId}`);
    console.log(`  transactionId: ${this.transactionId}`);
    console.log(`  transactionDate: ${this.transactionDate}`);
    console.log(`  createdDate: ${this.createdDate}`);
    console.log(`  lastModifiedDate: ${this.lastModifiedDate}`);
    console.log(`  memo: ${this.memo}`);
  }
}

module.exports = NetSuiteRecord;
